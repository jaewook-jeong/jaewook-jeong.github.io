{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/navigation-block/","result":{"data":{"site":{"siteMetadata":{"title":"Woogi Blog","comment":{"utterances":"jaewook-jeong/jaewook-jeong.github.io"}}},"markdownRemark":{"id":"98e76d5a-4fec-52cb-a638-b883512c6fad","excerpt":"리액트 또는 Next.js에서 History api 라우팅을 감지하는 법(feat. modal) 이 글은 event 감지를 통해 새로고침이나 탭 닫기 등의 상황이 아닌 브라우저 라우팅에 관한 이야기입니다. 예를 들어 페이지에 form이 있다고 가정을 해봅시다. 이 form…","html":"<h2 id=\"리액트-또는-nextjs에서-history-api-라우팅을-감지하는-법feat-modal\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%98%90%EB%8A%94-nextjs%EC%97%90%EC%84%9C-history-api-%EB%9D%BC%EC%9A%B0%ED%8C%85%EC%9D%84-%EA%B0%90%EC%A7%80%ED%95%98%EB%8A%94-%EB%B2%95feat-modal\" aria-label=\"리액트 또는 nextjs에서 history api 라우팅을 감지하는 법feat modal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 또는 Next.js에서 History api 라우팅을 감지하는 법(feat. modal)</h2>\n<blockquote>\n<p>이 글은 event 감지를 통해 새로고침이나 탭 닫기 등의 상황이 아닌 브라우저 라우팅에 관한 이야기입니다.</p>\n</blockquote>\n<p>예를 들어 페이지에 form이 있다고 가정을 해봅시다. 이 form은 중요한 정보라서 꼭 submit(혹은 저장)을 해야하는 상황이라면요? 이 때 submit 하지 않은 상태에서 유저가 이탈하려고 할 때 react-router의 <a href=\"https://v5.reactrouter.com/core/api/Prompt\">prompt</a>, Nextjs에서는 useRouter의 <a href=\"https://nextjs.org/docs/api-reference/next/router#routerevents\">event</a>를 통해 navigate를 막을 수 있습니다.</p>\n<p>먼저 React app입니다.</p>\n<p>react-router(v5기준, <a href=\"https://reactrouter.com/en/main/upgrading/v5#prompt-is-not-currently-supported\">v6</a> 아직 미지원)에서 Prompt라는 컴포넌트를 제공합니다. 컴포넌트의 props의 타입을 보면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PromptProps</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>location<span class=\"token operator\">:</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> <span class=\"token constant\">H</span><span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    when<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>값을 살펴보면 when을 통해 navigation 허용 여부를 체크합니다. 그리고 message의 타입을 보면 2가지가 있는데, 먼저 string의 경우 <code class=\"language-text\">confirm</code>창의 message로 쓰일 string을 받습니다. 또한 함수가 올 수 있는데 해당 함수는 Location객체를 첫번째 파라미터로 가지고 string 또는 boolean을 리턴합니다. 이 함수타입의 message prop을 통해 <code class=\"language-text\">confirm</code>창이 아닌 다른 UI를 보여줄 수 있는 코드를 작성할 수 있습니다.</p>\n<p>아래와 같은 코드처럼 작성될 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>nextLocation<span class=\"token operator\">:</span> Location<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// navigation block이 필요할 경우</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasToBlock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">// 원하는 작업</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>false를 반환하면 라우팅이 되지 않습니다. 이 때 인자로 받은 location은 라우팅 될 location에 관한 정보를 가지고 있기 때문에 해당 정보를 저장해뒀다가 submit과 같은 작업 처리 후 사용할 수도 있습니다.</p>\n<p>만약 모달을 띄운다면 모달 렌더링에 관한 state를 위의 코드 <code class=\"language-text\">if</code>내에서 처리하는 등의 작업을 통해 원하는 UI를 그려낼 수 있습니다.</p>\n<p>다음은 Next.js입니다.</p>\n<p>next에서 현재의 pathName을 가져오거나 페이지를 이동시킬 때 사용하는 useRouter에는 events라는 object가 있습니다.  이 object에는 on, off, emit이라는 메소드를 가지고 있습니다. on은 특정 이벤트를 감지하여 원하는 동작을 처리할 때 사용되고 off는 unmount시에 on 메소드를 정리하는 함수라 할 수 있습니다. emit은 특정한 이벤트를 동작시키게 하는 메소드입니다. events object를 사용하여 아래 코드와 같이 페이지 이동을 감지하여 처리할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> events <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>forcePush<span class=\"token punctuation\">,</span> setForcePush<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleBrowseAway</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>forcePush<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasToBlock<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// ui와 관련된 처리</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'routeChangeError'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">'routeChange aborted.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  events<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'routeChangeStart'</span><span class=\"token punctuation\">,</span> handleBrowseAway<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'routeChangeStart'</span><span class=\"token punctuation\">,</span> handleBrowseAway<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>forcePush<span class=\"token punctuation\">,</span> hasToBlock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>먼저 route가 변경되는 시점을 알 수 있는 <code class=\"language-text\">routeChangeStart</code> 를 활용하여 해당 이벤트가 발생했을 때 페이지 이동을 막아야(hasToBlock) 한다면 routeChangeError를 emit함과 동시에 throw 처리를 통해 페이지가 변경되지 않도록 처리할 수 있습니다.</p>\n<p>또한 forcePush라는 state가 존재하는데 해당 state를 제어하여 submit이 된다거나 혹은 UI에서 무언가 처리되고 navigate될 때 다시 정상적으로 처리되도록 동작하게 할 수 있습니다.</p>","frontmatter":{"title":"리액트 또는 Next.js에서 History api 라우팅을 감지하는 법(feat. modal)","date":"October 15, 2022","description":"리액트 또는 Next.js에서 History api 라우팅을 감지하는 법"}},"previous":{"fields":{"slug":"/temp/now-where-i-am/"},"frontmatter":{"title":"지금 나의 위치"}},"next":{"fields":{"slug":"/resume/ko/"},"frontmatter":{"title":"about"}}},"pageContext":{"id":"98e76d5a-4fec-52cb-a638-b883512c6fad","previousPostId":"6bb21550-a6b3-5ee6-bb9b-b2128d48d46e","nextPostId":"ef1d4c4b-9737-519f-9c35-966626a54727"}},"staticQueryHashes":["2841359383","4234858013"]}