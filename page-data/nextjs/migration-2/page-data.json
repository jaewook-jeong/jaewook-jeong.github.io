{"componentChunkName":"component---src-templates-blog-post-js","path":"/nextjs/migration-2/","result":{"data":{"site":{"siteMetadata":{"title":"Woogi Blog","comment":{"utterances":"jaewook-jeong/jaewook-jeong.github.io"}}},"markdownRemark":{"id":"a3a46710-54be-5606-bc9e-60dedc56064d","excerpt":"이번 EP2은 Next.js에서 어떻게 Auth를 처리했는지에 관한 이야기입니다. Auth 분석 Next.js를 기반으로하는 새로운 프로젝트 V2가 시작되고 제가 진행한 일은 Auth였습니다. 당장 유저정보를 불러와 GNB…","html":"<p>이번 EP2은 Next.js에서 어떻게 Auth를 처리했는지에 관한 이야기입니다.</p>\n<br/>\n<h2 id=\"auth-분석\" style=\"position:relative;\"><a href=\"#auth-%EB%B6%84%EC%84%9D\" aria-label=\"auth 분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Auth 분석</h2>\n<p>Next.js를 기반으로하는 새로운 프로젝트 V2가 시작되고 제가 진행한 일은 Auth였습니다. 당장 유저정보를 불러와 GNB에 그리고 싶었거든요.</p>\n<blockquote>\n<p>내 유저 정보를 어떻게 알죠?</p>\n</blockquote>\n<p>내가 누군지 정보를 담아서 Call하면 되죠!\n그러면 정보를 어떻게 담죠?</p>\n<h3 id=\"bearer-authentication\" style=\"position:relative;\"><a href=\"#bearer-authentication\" aria-label=\"bearer authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bearer Authentication</h3>\n<p>프로덕트는 Bearer Authentication방식으로 개발되었습니다. 인증에 필요한 token은 로그인시에 쿠키로 발급받습니다. Login page는 V1에서 유지했는데요. 도메인이 같기 때문에 발급받은 token이 담긴 Cookie를 어떻게 다룰 것인가가 가장 중요한 문제였습니다. 왜냐하면 Cookie는 <code class=\"language-text\">httpOnly</code> 거든요.</p>\n<blockquote>\n<p>참고로 서브도메인에 대한 보안상의 이유로 credential로 처리하지 않았습니다.</p>\n</blockquote>\n<h3 id=\"httponly\" style=\"position:relative;\"><a href=\"#httponly\" aria-label=\"httponly permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HttpOnly🍪</h3>\n<p>다들 알고 계시듯이 httponly쿠키는 <strong>브라우저에서 접근이 불가</strong>능합니다. 이 말은 다시 생각해보면 클라이언트단에서 유저가 무언가 요청할 때 쿠키를 가져와 Bearer에 실을 수 없다는 말과 같습니다. 그러면 유저 정보를 가져오거나 혹은 권한이 필요한 요청을 할 수 없습니다.</p>\n<br/>\n<h2 id=\"쿠키를-가져오자\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EB%A5%BC-%EA%B0%80%EC%A0%B8%EC%98%A4%EC%9E%90\" aria-label=\"쿠키를 가져오자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키를 가져오자!</h2>\n<blockquote>\n<p>브라우저 환경에서 가져올 수 없다면 node환경에서는 되겠구나!</p>\n</blockquote>\n<h3 id=\"node\" style=\"position:relative;\"><a href=\"#node\" aria-label=\"node permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node</h3>\n<p>Next.js로 개발하고 있었기 때문에 node환경을 찾는건 어렵지 않았습니다. <a href=\"https://nextjs.org/docs/basic-features/data-fetching/overview\">Data-Fetching</a>시점에 context를 활용하면 request속에 담긴 쿠키를 가져오는 건 어렵지 않았기 때문이죠. 그러면 여러 data-fetching중 어떤 것을 사용해야할지 고민했습니다.</p>\n<h3 id=\"getinitialprops\" style=\"position:relative;\"><a href=\"#getinitialprops\" aria-label=\"getinitialprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getInitialProps</h3>\n<p>가장 먼저 고민했던 부분은 <code class=\"language-text\">어떤 페이지에 접속하든</code>이었습니다. 해당 페이지가 SSR이든 CSR이든 쿠키를 가져와 클라이언트단에서 사용할 수 있어야했거든요. 그래서 처음 생각이 난 곳은 <code class=\"language-text\">_app</code>이었습니다. 모든 페이지를 initial하는 곳이기 때문이죠.\n<code class=\"language-text\">_app</code>에서는 data-fetching-methods 중 유일하게 <code class=\"language-text\">getInitialProps</code>만을 사용할 수 있었습니다. 해당 메소드에서 제공되는 context argument에서 httpOnly쿠키를 가져올 수 있었습니다.</p>\n<blockquote>\n<p>뭐야 끝난건가?</p>\n</blockquote>\n<p>그러나 문제가 있었습니다.\n일단 <code class=\"language-text\">getInitialProps</code>는 번들링될 때 컴포넌트와 분리되지 않습니다. 다시말해 클라이언트단에서도 해당 코드가 실행됩니다. 그래서 클라이언트단에서 실행될 때는 예외처리가 필요합니다(쿠키를 가져올 수 없을테니까요). 또한 어떤 페이지에서 SSR이 필요해 <code class=\"language-text\">getServerSideProps</code>를 사용했다면 <code class=\"language-text\">_app</code>에서 빼낸 token(getInitialProps로부터 가져온)을 전달할 수 없습니다. 만약 SSR페이지에서 <code class=\"language-text\">getInitialProps</code>를 사용하면 처리할 수 있지만 위에서 언급한대로 번들링 때 포함돼 불필요하게 파일 사이즈가 커집니다. 그럼에도 <code class=\"language-text\">getServerSideProps</code>를 사용하려면 따로 ctx에서 쿠키를 가져오는 로직이 필요하게되어 코드가 중복 존재하게됩니다. 또한 <a href=\"https://nextjs.org/docs/advanced-features/automatic-static-optimization\">ASO</a>를 사용할 수 없는 이유 등으로 다른 방법을 찾아보게 되었습니다.</p>\n<h3 id=\"getserversideprops\" style=\"position:relative;\"><a href=\"#getserversideprops\" aria-label=\"getserversideprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getServerSideProps</h3>\n<p><code class=\"language-text\">getInitialProps</code>의 문제를 봤을 때 node환경(server)에서만 실행되어야 한다는 조건이 붙으면 좋겠다는 생각을 했습니다. 그렇다면 접근하기 가장 쉬운방법은 <code class=\"language-text\">getServerSideProps</code>를 사용하는 방안이었습니다. 그런데 <code class=\"language-text\">_app</code>에서는 <code class=\"language-text\">getServerSideProps</code>를 사용할 수 없습니다. 그리하여 조금은 괴랄(?)하지만 모든 페이지에 <code class=\"language-text\">getServerSideProps</code>를 사용하면 되는거 아니야?라는 생각을 하게됩니다.</p>\n<br/>\n<h2 id=\"prepareserversideprops\" style=\"position:relative;\"><a href=\"#prepareserversideprops\" aria-label=\"prepareserversideprops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PrepareServerSideProps</h2>\n<p>이제 getServerSideProps를 감싼 Util을 제작하기에 이릅니다.</p>\n<blockquote>\n<p>당시에는 최선의 고민이었습니다.</p>\n</blockquote>\n<p>이어서 연재할 “어떻게 수정했는지”까지 지켜봐주세요!</p>\n<blockquote>\n</blockquote>\n<p>해당 Util은 다음과 같은 작업순서를 가집니다.</p>\n<h3 id=\"cookie\" style=\"position:relative;\"><a href=\"#cookie\" aria-label=\"cookie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cookie</h3>\n<p>원래의 목표 httpOnly쿠키를 먼저 가져와야 했습니다. 그래야 해당 쿠키로 Bearer에 실어서 요청할 수 있을테니까요. <code class=\"language-text\">getServerSideProps</code>의 argument로 부터 쿠키를 너무나 쉽게 가져올 수 있었습니다.</p>\n<blockquote>\n<p>쿠키로부터 가져온 토큰을 저장할 store는 추후에 작성할 예정입니다.</p>\n</blockquote>\n<p>이번 글은 httpOnly쿠키를 어떻게 꺼낼까에 초점을 맞춰주시면 됩니다.</p>\n<h3 id=\"user\" style=\"position:relative;\"><a href=\"#user\" aria-label=\"user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>User</h3>\n<p>쿠키를 가져왔으니 그 다음은 유저정보를 가져왔습니다. 유저정보를 get해온 이유는 프로덕트에 유저가 가질 수 있는 여러 역할이 있었기 때문입니다. 이 역할이 페이지의 접근을 제한하기 때문입니다.</p>\n<h3 id=\"routing\" style=\"position:relative;\"><a href=\"#routing\" aria-label=\"routing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Routing</h3>\n<p>이제는 가져온 유저정보를 바탕으로 routing을 처리해줬습니다. 해당 페이지에 접근할 수 있는지 없는지, 만약 접근할 수 없다면 <code class=\"language-text\">redirect</code>객체를 early return하여 페이지의 접근을 막았습니다. 이를 통해 접근할 수 없는 정보에 대해서도 미리 처리하면서 동시에 페이지의 접근을 막았습니다.</p>\n<h3 id=\"fetch\" style=\"position:relative;\"><a href=\"#fetch\" aria-label=\"fetch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fetch</h3>\n<p>이제 코드가 해당 부분까지 진행되면 페이지를 구성하는데에 필요한 정보를 가져오는 fetch를 진행합니다. fetch가 완료되면 불러온 정보를 props로 내려주게됩니다.</p>\n<h3 id=\"code\" style=\"position:relative;\"><a href=\"#code\" aria-label=\"code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code</h3>\n<p>이로써 <code class=\"language-text\">prepareServerSideProps</code>함수는 <code class=\"language-text\">getServerSideProps</code>에 알맞은 return 객체를 반환하는 함수가 됩니다. 개략적인 코드는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prepareServerSideProps</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> getServerSidePropsFunc<span class=\"token punctuation\">,</span> accessibleRoles <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t<span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> <span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>accessibleRoles<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tredirect<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          destination<span class=\"token operator\">:</span> <span class=\"token string\">'/403'</span><span class=\"token punctuation\">,</span>\n          permanent<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getServerSidePropsFunc</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t\tprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdata<span class=\"token punctuation\">,</span>\n\t\t\t\ttoken<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 사용부 pages/index.tsx</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HomePage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HomeComponent</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getServerSideProps <span class=\"token operator\">=</span> <span class=\"token function\">prepareServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\taccessibleRoles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"이게-최선이니\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B2%8C-%EC%B5%9C%EC%84%A0%EC%9D%B4%EB%8B%88\" aria-label=\"이게 최선이니 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이게 최선이니?</h2>\n<p>작업을 하면서 매 순간 고민했습니다.\n이게 맞을까?\n이렇게 하면 next서버에 부하가 크지 않을까?\n꼭 모든 페이지가 SSR이어야 할까?\n그래서 여러 고민을 통해 조금 더 나은 방식으로 수정했습니다. 어떻게 수정했는지는 다음화에 이어 작성하겠습니다.</p>","frontmatter":{"title":"React에서 Next.js로 Migration(EP2: 과연 이게 올바른 선택일까? feat. Auth)","date":"March 28, 2023","description":"next.js에서 httponly쿠키를 어떻게 다룰까에 관한 이야기입니다."}},"previous":{"fields":{"slug":"/nextjs/migration-1/"},"frontmatter":{"title":"React에서 Next.js로 Migration(EP1: 누구나 피치 못할 사정이 있다)"}},"next":{"fields":{"slug":"/resume/ko/"},"frontmatter":{"title":"about"}}},"pageContext":{"id":"a3a46710-54be-5606-bc9e-60dedc56064d","previousPostId":"d63f67fe-cfdf-596d-974f-e2ee23ae5877","nextPostId":"ef1d4c4b-9737-519f-9c35-966626a54727"}},"staticQueryHashes":["2841359383","4234858013"]}