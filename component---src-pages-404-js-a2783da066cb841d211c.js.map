{"version":3,"file":"component---src-pages-404-js-a2783da066cb841d211c.js","mappings":"qKAuBA,GArBkBA,E,QAAAA,mBAAH,kWCsDf,EApDe,SAAC,GAAmC,IAG7CC,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADQ,MACKH,EAASI,SA8B5B,OA1BEL,EADEI,EAEA,2BACE,uBAAKE,MAAO,CAAEC,QAAS,OAAQC,cAAe,gBAC5C,gBAAC,EAAAC,KAAD,CAAMC,GAAG,UAAT,UAKF,sBAAIC,UAAU,gBACZ,gBAAC,EAAAF,KAAD,CAAMC,GAAG,KAAKR,KAMlB,uBAAKI,MAAO,CAAEC,QAAS,OAAQK,eAAgB,kBAC7C,gBAAC,EAAAH,KAAD,CAAME,UAAU,mBAAmBD,GAAG,KACnCR,GAEH,gBAAC,EAAAO,KAAD,CAAMC,GAAG,UAAT,UAQJ,uBAAKC,UAAU,iBAAiB,oBAAmBP,GACjD,gBAAC,EAAD,MACA,0BAAQO,UAAU,iBAChB,wBAAME,IAAI,mBAAmBC,MAAM,UAAUC,KAAK,0BAClD,wBAAMF,IAAI,OAAOG,KAAK,YAAYF,MAAM,QAAQC,KAAK,uBACrD,wBAAMF,IAAI,OAAOG,KAAK,YAAYF,MAAM,QAAQC,KAAK,uBACrD,wBAAMF,IAAI,WAAWE,KAAK,sBACzBf,GAEH,4BAAOG,GACP,oCACK,IAAIc,MAAOC,cADhB,mBAGE,qBAAGH,KAAK,4BAAR,WAIP,C,+CC3CKI,EAAM,SAAC,GAA4C,IAAD,EAAzCC,EAAyC,EAAzCA,YAAmBlB,GAAsB,EAA5BmB,KAA4B,EAAtBnB,OAAOC,EAAe,EAAfA,SAC/BmB,GAASC,EAAAA,EAAAA,gBAAe,cAAxBD,KAgBFE,EAAkBJ,GAAeE,EAAKG,aAAaL,YACnDM,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBvB,MAExC,OACE,gCACE,6BAAQwB,EAAkBxB,EAAN,MAAiBwB,EAAiBxB,GACtD,wBAAMyB,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAAS1B,IACnC,wBAAM2B,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YAChCzB,EAGN,EACDgB,EAAIW,aAAe,CACjBV,YAAY,IAMd,K,kGClCaW,EAAO,kBAAM,gBAAC,IAAD,CAAK7B,MAAM,kBAAjB,EAEpB,UAZqB,SAAC,GAAwB,IAAtB8B,EAAqB,EAArBA,KAAM/B,EAAe,EAAfA,SACtBgC,EAAYD,EAAKV,KAAKG,aAAavB,MACzC,OACE,gBAAC,IAAD,CAAQD,SAAUA,EAAUC,MAAO+B,GACjC,4CACA,oFAGL,C","sources":["webpack://woogi-blog/./src/styles/GlobalCss.jsx","webpack://woogi-blog/./src/components/layout.js","webpack://woogi-blog/./src/components/seo.js","webpack://woogi-blog/./src/pages/404.js"],"sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nconst GlobalCss = createGlobalStyle`\n  @import url(//spoqa.github.io/spoqa-han-sans/css/SpoqaHanSans-kr.css);\n  @import url(//fonts.googleapis.com/css?family=Monoton|Nanum+Gothic&display=swap);\n\n  body {\n    color: #333;\n    font-weight: 300;\n    font-size: 17px;\n    font-family: 'Spoqa Han Sans', 'Nanum Gothic', sans-serif;\n    line-height: 1.5;\n    word-break: keep-all;\n\n    background-color: white;\n  }\n\n  a {\n    color: #333;\n    text-decoration: none;\n  }\n`\n\nexport default GlobalCss;\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport GlobalCss from \"../styles/GlobalCss\";\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <div>\n        <div style={{ display: 'flex', flexDirection: 'row-reverse' }}>\n          <Link to=\"/about\">\n            about\n          </Link>\n          {/*테마 토글 필요*/}\n        </div>\n        <h1 className=\"main-heading\">\n          <Link to=\"/\">{title}</Link>\n        </h1>\n      </div>\n    )\n  } else {\n    header = (\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <Link className=\"header-link-home\" to=\"/\">\n          {title}\n        </Link>\n        <Link to=\"/about\">\n          about\n        </Link>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <GlobalCss />\n      <header className=\"global-header\">\n        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" />\n        <link rel=\"manifest\" href=\"/site.webmanifest\" />\n        {header}\n      </header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n        query {\n            site {\n                siteMetadata {\n                    title\n                    description\n                    social {\n                        twitter\n                    }\n                }\n            }\n        }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n  )\n}\nSeo.defaultProps = {\n  description: ``,\n}\nSeo.propTypes = {\n  description: PropTypes.string,\n  title: PropTypes.string.isRequired,\n}\nexport default Seo","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n    query {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n    }\n`"],"names":["createGlobalStyle","header","location","title","children","isRootPath","pathname","style","display","flexDirection","Link","to","className","justifyContent","rel","sizes","href","type","Date","getFullYear","Seo","description","lang","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","defaultProps","Head","data","siteTitle"],"sourceRoot":""}