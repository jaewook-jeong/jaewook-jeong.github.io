{"version":3,"file":"component---src-templates-blog-post-js-51228e4f80e6116b7c9d.js","mappings":"6PAUaA,EAAa,SAAHC,GAAkB,IAAZC,EAAID,EAAJC,KACrBC,EAAUC,EAAAA,YAsBhB,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcC,EAAAA,GAAmBC,EAAAA,EAAAA,MACjCC,EAAaC,SAASC,cAAc,UACpCC,EAAmB,CACvBC,IAZM,gCAaNX,KAAAA,EACAY,OAbS,SAcTC,MAAOT,EAbM,cACC,eAadU,MAAO,UACPC,OAAO,EACP,aAAc,WACdC,YAAa,aAGfC,OAAOC,KAAKR,GAAkBS,SAAQ,SAAAC,GACpCb,EAAWc,aAAaD,EAAWV,EAAiBU,GACtD,IACAnB,EAAQqB,QAAQC,YAAYhB,EAC9B,GAAG,IAEIL,EAAAA,cAAA,OAAKsB,UAAU,aAAaC,IAAKxB,GAC1C,ECqCayB,EAAO,SAAHC,GAA4C,IAAdC,EAAID,EAA5BE,KAAQC,eAC7B,OACE5B,EAAAA,cAAC6B,EAAAA,EAAG,CACFC,MAAOJ,EAAKK,YAAYD,MACxBE,YAAaN,EAAKK,YAAYC,aAAeN,EAAKO,SAGxD,EAEA,EAtEyB,SAAHpC,GAGf,IAADqC,EAAAC,EAAAC,EAAAC,EAAAxC,EAFJ8B,KAAQW,EAAQD,EAARC,SAAUC,EAAIF,EAAJE,KAAMC,EAAIH,EAAJG,KAAsBd,EAAIW,EAApBT,eAC9Ba,EAAQ5C,EAAR4C,SAEMC,GAA6B,QAAjBR,EAAAM,EAAKG,oBAAY,IAAAT,OAAA,EAAjBA,EAAmBJ,QAAK,QACpCzB,EAA8B,QAApB8B,EAAGK,EAAKG,oBAAY,IAAAR,GAAS,QAATC,EAAjBD,EAAmBS,eAAO,IAAAR,OAAT,EAAjBA,EAA4B/B,WACzCwC,EAAYL,EAAKG,aAAaG,SACfD,GACdA,EAAUE,gBAAgBC,MAAMvC,IAEvC,OACET,EAAAA,cAACiD,EAAAA,EAAM,CAACR,SAAUA,EAAUX,MAAOY,GACjC1C,EAAAA,cAAA,WACEsB,UAAU,YACV4B,WAAS,EACTC,SAAS,6BAETnD,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAIoD,SAAS,YAAY1B,EAAKK,YAAYD,OAC1C9B,EAAAA,cAAA,SAAI0B,EAAKK,YAAYsB,OAEvBrD,EAAAA,cAAA,WACEsD,wBAAyB,CAAEC,OAAQ7B,EAAK8B,MACxCJ,SAAS,gBAEXpD,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACyD,EAAAA,EAAG,QAGRzD,EAAAA,cAAA,OAAKsB,UAAU,iBACbtB,EAAAA,cAAA,MACE0D,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX/D,EAAAA,cAAA,UACGsC,GACCtC,EAAAA,cAACgE,EAAAA,KAAI,CAACC,GAAI3B,EAAS4B,OAAOC,KAAMC,IAAI,QAAO,KACtC9B,EAASP,YAAYD,QAI9B9B,EAAAA,cAAA,UACGuC,GACCvC,EAAAA,cAACgE,EAAAA,KAAI,CAACC,GAAI1B,EAAK2B,OAAOC,KAAMC,IAAI,QAC7B7B,EAAKR,YAAYD,MAAM,WAM/BzB,GAAcL,EAAAA,cAACJ,EAAU,CAACE,KAAMO,IAGzC,C","sources":["webpack://woogi-blog/./src/components/utterances/index.jsx","webpack://woogi-blog/./src/templates/blog-post.js"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport * as Dom from '../../utils/dom'\nimport { THEME } from '../../constants'\n\nconst src = 'https://utteranc.es/client.js'\nconst branch = 'master'\nconst DARK_THEME = 'photon-dark'\nconst LIGHT_THEME = 'github-light'\n\nexport const Utterances = ({ repo }) => {\n  const rootElm = React.createRef()\n\n  useEffect(() => {\n    const isDarkTheme = Dom.hasClassOfBody(THEME.DARK)\n    const utterances = document.createElement('script')\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: isDarkTheme ? DARK_THEME : LIGHT_THEME,\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    }\n\n    Object.keys(utterancesConfig).forEach(configKey => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey])\n    })\n    rootElm.current.appendChild(utterances)\n  }, [])\n\n  return <div className=\"utterances\" ref={rootElm} />\n}","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Utterances } from \"../components/utterances\";\n\nimport '../styles/code.scss'\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  const utterances = site.siteMetadata?.comment?.utterances;\n  const thumbnail = site.siteMetadata.thumnail;\n  const thumbnailSrc = thumbnail\n    ? `${thumbnail.childImageSharp.fixed.src}`\n    : undefined\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      {!!utterances && <Utterances repo={utterances} />}\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        comment {\n          utterances\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n#        thumbnail {\n#            childImageSharp {\n#                fixed(width: 800) {\n#                    src\n#                }\n#            }\n#        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Utterances","_ref","repo","rootElm","React","useEffect","isDarkTheme","Dom","THEME","utterances","document","createElement","utterancesConfig","src","branch","theme","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","current","appendChild","className","ref","Head","_ref2","post","data","markdownRemark","Seo","title","frontmatter","description","excerpt","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$c","_ref$data","previous","next","site","location","siteTitle","siteMetadata","comment","thumbnail","thumnail","childImageSharp","fixed","Layout","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}