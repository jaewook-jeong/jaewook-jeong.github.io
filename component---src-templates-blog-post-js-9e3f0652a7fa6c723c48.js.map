{"version":3,"file":"component---src-templates-blog-post-js-9e3f0652a7fa6c723c48.js","mappings":"6PAUaA,EAAa,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrBC,EAAUC,EAAAA,YAsBhB,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAcC,EAAAA,GAAmBC,EAAAA,EAAAA,MACjCC,EAAaC,SAASC,cAAc,UACpCC,EAAmB,CACvBC,IAZM,gCAaNX,KAAAA,EACAY,OAbS,SAcTC,MAAOT,EAbM,cACC,eAadU,MAAO,UACPC,OAAO,EACP,aAAc,WACdC,YAAa,aAGfC,OAAOC,KAAKR,GAAkBS,SAAQ,SAAAC,GACpCb,EAAWc,aAAaD,EAAWV,EAAiBU,GACrD,IACDnB,EAAQqB,QAAQC,YAAYhB,EAC7B,GAAE,IAEI,uBAAKiB,UAAU,aAAaC,IAAKxB,GACzC,ECqCYyB,EAAO,SAAC,GAAwC,IAAdC,EAAa,EAArCC,KAAQC,eAC7B,OACE,gBAAC,IAAD,CACEC,MAAOH,EAAKI,YAAYD,MACxBE,YAAaL,EAAKI,YAAYC,aAAeL,EAAKM,SAGvD,EAED,EAtEyB,SAAC,GAGnB,IAAD,UAFJL,KAAQM,EAEJ,EAFIA,SAAUC,EAEd,EAFcA,KAAMC,EAEpB,EAFoBA,KAAsBT,EAE1C,EAF0BE,eAC9BQ,EACI,EADJA,SAEMC,GAAY,UAAAF,EAAKG,oBAAL,eAAmBT,QAAnB,QACZvB,EAAU,UAAG6B,EAAKG,oBAAR,iBAAG,EAAmBC,eAAtB,aAAG,EAA4BjC,WACzCkC,EAAYL,EAAKG,aAAaG,SACfD,GACdA,EAAUE,gBAAgBC,MAAMjC,IAEvC,OACE,gBAAC,IAAD,CAAQ0B,SAAUA,EAAUP,MAAOQ,GACjC,2BACEd,UAAU,YACVqB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYpB,EAAKI,YAAYD,OAC1C,yBAAIH,EAAKI,YAAYiB,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQvB,EAAKwB,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAKvB,UAAU,iBACb,sBACE4B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGvB,GACC,gBAAC,EAAAwB,KAAD,CAAMC,GAAIzB,EAAS0B,OAAOC,KAAMC,IAAI,QAApC,KACK5B,EAASH,YAAYD,QAI9B,0BACGK,GACC,gBAAC,EAAAuB,KAAD,CAAMC,GAAIxB,EAAKyB,OAAOC,KAAMC,IAAI,QAC7B3B,EAAKJ,YAAYD,MADpB,WAOLvB,GAAc,gBAACR,EAAD,CAAYC,KAAMO,IAGxC,C","sources":["webpack://woogi-blog/./src/components/utterances/index.jsx","webpack://woogi-blog/./src/templates/blog-post.js"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport * as Dom from '../../utils/dom'\nimport { THEME } from '../../constants'\n\nconst src = 'https://utteranc.es/client.js'\nconst branch = 'master'\nconst DARK_THEME = 'photon-dark'\nconst LIGHT_THEME = 'github-light'\n\nexport const Utterances = ({ repo }) => {\n  const rootElm = React.createRef()\n\n  useEffect(() => {\n    const isDarkTheme = Dom.hasClassOfBody(THEME.DARK)\n    const utterances = document.createElement('script')\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: isDarkTheme ? DARK_THEME : LIGHT_THEME,\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    }\n\n    Object.keys(utterancesConfig).forEach(configKey => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey])\n    })\n    rootElm.current.appendChild(utterances)\n  }, [])\n\n  return <div className=\"utterances\" ref={rootElm} />\n}","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Utterances } from \"../components/utterances\";\n\nimport '../styles/code.scss'\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  const utterances = site.siteMetadata?.comment?.utterances;\n  const thumbnail = site.siteMetadata.thumnail;\n  const thumbnailSrc = thumbnail\n    ? `${thumbnail.childImageSharp.fixed.src}`\n    : undefined\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      {!!utterances && <Utterances repo={utterances} />}\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        comment {\n          utterances\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n#        thumbnail {\n#            childImageSharp {\n#                fixed(width: 800) {\n#                    src\n#                }\n#            }\n#        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["Utterances","repo","rootElm","React","useEffect","isDarkTheme","Dom","THEME","utterances","document","createElement","utterancesConfig","src","branch","theme","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","current","appendChild","className","ref","Head","post","data","markdownRemark","title","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","comment","thumbnail","thumnail","childImageSharp","fixed","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}